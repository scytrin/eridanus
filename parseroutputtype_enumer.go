// Code generated by "enumer -json -text -yaml -sql -type=ParserOutputType"; DO NOT EDIT.

//
package eridanus

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _ParserOutputTypeName = "ContentTagFollowTitleSourceMD5Hash"

var _ParserOutputTypeIndex = [...]uint8{0, 7, 10, 16, 21, 27, 34}

func (i ParserOutputType) String() string {
	if i < 0 || i >= ParserOutputType(len(_ParserOutputTypeIndex)-1) {
		return fmt.Sprintf("ParserOutputType(%d)", i)
	}
	return _ParserOutputTypeName[_ParserOutputTypeIndex[i]:_ParserOutputTypeIndex[i+1]]
}

var _ParserOutputTypeValues = []ParserOutputType{0, 1, 2, 3, 4, 5}

var _ParserOutputTypeNameToValueMap = map[string]ParserOutputType{
	_ParserOutputTypeName[0:7]:   0,
	_ParserOutputTypeName[7:10]:  1,
	_ParserOutputTypeName[10:16]: 2,
	_ParserOutputTypeName[16:21]: 3,
	_ParserOutputTypeName[21:27]: 4,
	_ParserOutputTypeName[27:34]: 5,
}

// ParserOutputTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParserOutputTypeString(s string) (ParserOutputType, error) {
	if val, ok := _ParserOutputTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ParserOutputType values", s)
}

// ParserOutputTypeValues returns all values of the enum
func ParserOutputTypeValues() []ParserOutputType {
	return _ParserOutputTypeValues
}

// IsAParserOutputType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ParserOutputType) IsAParserOutputType() bool {
	for _, v := range _ParserOutputTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ParserOutputType
func (i ParserOutputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ParserOutputType
func (i *ParserOutputType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ParserOutputType should be a string, got %s", data)
	}

	var err error
	*i, err = ParserOutputTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ParserOutputType
func (i ParserOutputType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ParserOutputType
func (i *ParserOutputType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParserOutputTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ParserOutputType
func (i ParserOutputType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ParserOutputType
func (i *ParserOutputType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ParserOutputTypeString(s)
	return err
}

func (i ParserOutputType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ParserOutputType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ParserOutputTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
