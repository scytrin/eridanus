// Code generated by "enumer -json -text -yaml -sql -type=StringMatcherType"; DO NOT EDIT.

//
package eridanus

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _StringMatcherTypeName = "ExactRegex"

var _StringMatcherTypeIndex = [...]uint8{0, 5, 10}

func (i StringMatcherType) String() string {
	if i < 0 || i >= StringMatcherType(len(_StringMatcherTypeIndex)-1) {
		return fmt.Sprintf("StringMatcherType(%d)", i)
	}
	return _StringMatcherTypeName[_StringMatcherTypeIndex[i]:_StringMatcherTypeIndex[i+1]]
}

var _StringMatcherTypeValues = []StringMatcherType{0, 1}

var _StringMatcherTypeNameToValueMap = map[string]StringMatcherType{
	_StringMatcherTypeName[0:5]:  0,
	_StringMatcherTypeName[5:10]: 1,
}

// StringMatcherTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StringMatcherTypeString(s string) (StringMatcherType, error) {
	if val, ok := _StringMatcherTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StringMatcherType values", s)
}

// StringMatcherTypeValues returns all values of the enum
func StringMatcherTypeValues() []StringMatcherType {
	return _StringMatcherTypeValues
}

// IsAStringMatcherType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StringMatcherType) IsAStringMatcherType() bool {
	for _, v := range _StringMatcherTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StringMatcherType
func (i StringMatcherType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StringMatcherType
func (i *StringMatcherType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StringMatcherType should be a string, got %s", data)
	}

	var err error
	*i, err = StringMatcherTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for StringMatcherType
func (i StringMatcherType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for StringMatcherType
func (i *StringMatcherType) UnmarshalText(text []byte) error {
	var err error
	*i, err = StringMatcherTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for StringMatcherType
func (i StringMatcherType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for StringMatcherType
func (i *StringMatcherType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = StringMatcherTypeString(s)
	return err
}

func (i StringMatcherType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *StringMatcherType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := StringMatcherTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
